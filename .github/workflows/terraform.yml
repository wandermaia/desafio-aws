name: "INFRA - Terraform Workflow"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      aws-region:
        type: string
        required: true
    secrets:
      aws-statefile-s3-bucket:
        required: true
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.2
      
      - name: Configure AWS Credencials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}
      
      - name: Read destroy configuration
        id: read-destroy-config
        run: |
          DESTROY="$(jq -r '.${{ inputs.environment }}' ./infra/destroy_config.json)"
          echo "destroy=$(echo $DESTROY)" >> $GITHUB_OUTPUT


      # # Removendo os elementos criados. Esse passo é importante para garantir que não fique nada prendendo a destruição.
      # # Houve alguns casos que load balancers criados fora do terraform estavam prendendo a infraestrutura.
      # - name: Deploy to EKS
      #   if: steps.read-destroy-config.outputs.destroy == 'true'
      #   working-directory: ./infra
      #   run: |
      #     aws eks update-kubeconfig --name "eks-${{ inputs.environment }}" --region ${{ inputs.aws-region }}

      #     echo -e "\nArquivos de maifesto que serão Deletados:\n"
      #     cat ./k8s/*
          
      #     kubectl delete -f ./k8s/


      - name: Terraform Init
        working-directory: ./infra
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ inputs.aws-region }}" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Destroy
        if: steps.read-destroy-config.outputs.destroy == 'true'
        working-directory: ./infra
        id: terraform-destroy
        run: terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform destroy -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -auto-approve
          
      - name: Terraform Plan
        if: steps.read-destroy-config.outputs.destroy != 'true'
        working-directory: ./infra
        id: terraform-plan
        run: terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform plan -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"

      - name: Terraform Apply
        if: steps.read-destroy-config.outputs.destroy != 'true'
        working-directory: ./infra
        id: terraform-apply
        run: terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform apply "${{ inputs.environment }}.plan"

      # Aplicando os manifestos no eks
      - name: Deploy to EKS
        if: steps.read-destroy-config.outputs.destroy != 'true'
        working-directory: ./infra
        run: |
          aws eks update-kubeconfig --name "eks-${{ inputs.environment }}" --region ${{ inputs.aws-region }}

          echo -e "\nArquivos de maifesto que serão aplicados:\n"
          cat ./k8s/*
          
          kubectl apply -f ./k8s/
