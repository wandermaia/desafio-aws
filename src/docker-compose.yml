services:
  database:
    container_name: mysql-8
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: go-calculator
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"

  api:
    container_name: go-calculator
    build: ./go-calculator # Caminho para o Dockerfile da api
    ports:
      - "7000:7000"
    environment:
      DB_USER: root
      DB_PASSWORD: password
      DB_HOST: database
      DB_NAME: go-calculator
    depends_on:
      - database


  frontend:
    container_name: front-magic-calculator
    build:
      context: ./magic-calculator # Caminho para o Dockerfile do frontend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      API_URL: http://api:7000/backend
    depends_on:
      - api




services:
  # jaeger-all-in-one:
  #   image: jaegertracing/all-in-one:latest
  #   restart: always
  #   ports:
  #     - "16686:16686"
  #     - "14268"
  #     - "14250"

  zipkin-latest:
    container_name: zipkin
    image: openzipkin/zipkin
    restart: always
    ports:
      - "9411:9411"

  # prometheus:
  #   container_name: prometheus
  #   image: prom/prometheus:latest
  #   restart: always
  #   volumes:
  #     - ./.docker/prometheus.yaml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"

  otel-collector:
    image: otel/opentelemetry-collector:latest
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./.docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "4317:4317"   # OTLP gRPC receiver

  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana:latest
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus


  service-a:
    container_name: service-a
    build:
      context: ./service-a
    environment:
      - SERVICE_B_URL=http://service-b:8282/
      - REQUEST_NAME_OTEL=service-a-request
      - OTEL_SERVICE_NAME=service-a
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - HTTP_PORT=:8181
    ports:
      - "8181:8181"
    depends_on:
      # - jaeger-all-in-one
      # - prometheus
      - otel-collector
      - zipkin-latest


  service-b:
    container_name: service-b
    build:
      context: ./service-b
    environment:
      - REQUEST_NAME_OTEL=service-b-request
      - OTEL_SERVICE_NAME=service-b
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - HTTP_PORT=:8282
    ports:
      - "8282:8282"
    depends_on:
      # - jaeger-all-in-one
      # - prometheus
      - otel-collector
      - zipkin-latest

